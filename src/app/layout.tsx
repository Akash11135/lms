import type { Metadata } from "next";
import "./globals.css";
import NavigationBar from "@/components/NavigationBar";
import { Roboto_Condensed } from "next/font/google";
import Footer from "@/components/Footer";
import { SidebarProvider, SidebarTrigger } from "@/components/ui/sidebar";
import { KindeClientProvider } from "@/providers/KindeClientProvider";
import { getKindeServerSession } from "@kinde-oss/kinde-auth-nextjs/server";
import { SearchContextProvider } from "@/context/SearchContext";
import { db } from "@/lib/db";
import { users } from "@/db/schema";
import { eq } from "drizzle-orm";

const roboto = Roboto_Condensed({
  subsets: ["latin"],
  weight: ["400", "700"],
  style: ["normal", "italic"],
  display: "swap",
  variable: "--font-roboto",
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const { getUser, isAuthenticated } = getKindeServerSession();
  const user = await getUser();
  const loggedIn = await isAuthenticated();
  try {
    if (loggedIn && user?.email) {
      const existing = await db
        .select()
        .from(users)
        .where(eq(users.email, user.email));

      if (existing.length === 0) {
        await db.insert(users).values({
          id: user.id,
          email: user.email,
          name: user.given_name,
          picture: user.picture,
          phone: user.phone_number,
          familyName: user.family_name,
          address: "Default address",
        });
      } else {
        console.log("User already exists");
      }
    }
  } catch (err) {
    console.error("Error creating user:", err);
  }

  return (
    <html lang="en" className={roboto.variable}>
      <body>
        <div className="flex flex-col min-h-screen">
          <SearchContextProvider>
            <NavigationBar user={user} isLoggedIn={loggedIn} />
            <SidebarProvider>
              <main className="flex grow">
                <SidebarTrigger />
                <KindeClientProvider>{children}</KindeClientProvider>
              </main>
            </SidebarProvider>
          </SearchContextProvider>
          <footer>
            <Footer />
          </footer>
        </div>
      </body>
    </html>
  );
}
